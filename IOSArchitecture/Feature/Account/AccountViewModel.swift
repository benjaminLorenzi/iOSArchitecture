//
//  AccountViewModel.swift
//  IOSArchitecture
//
//  Created by Benjamin LORENZI on 11/03/2020.
//  Copyright (c) 2020 Benjamin LORENZI. All rights reserved.
//
//  This file was generated by the DC (alias tactac kiki ðŸ¤£) Templates so
//  you can use now the benj architecture to Amex GBT project,
//  see https://gitlab.kdsneo.kds.com/blorenzi/iosarchitecture/tree/master/IOSArchitecture/Tutorial
//

import UIKit


protocol AccountViewModelProtocol {
    // TODO 7) Declare the state of the View
    // Here declare variable of the state or object you want observe
    // ----------------------------------------------------------
    //         Variables must be only accessible in read
    // ----------------------------------------------------------
    //
    // See the example below
    //
    var username: String { get }
    var biometryStatus: String { get }
}

class AccountViewModel: FeatureViewModel, AccountViewModelProtocol {
    // MARK: uiDelegate
    weak var uiDelegate: AccountViewController?
    typealias UIDelegate = AccountViewController

    // MARK: Dependencies 
    var dependencies: AccountDependenciesProtocol
    required init(deps: AccountDependenciesProtocol) {
        self.dependencies = deps
        // TODO 8) Bind to dynamic values
        // Here you can observe dynamic value from state in the core 
        // See the example below
        //
        dependencies.profileStatus.addObserver(self) { [weak self] in
            self?.notify()
        }
    }

    // TODO 9) Implement computed value
    var username: String {
        return dependencies.dataManager.profile?.username ?? ""
    }
       
    var biometryStatus: String {
        return dependencies.biometryState.value.supportedBiometry?.rawValue ?? "none"
    }
}
