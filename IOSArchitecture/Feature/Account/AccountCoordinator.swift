//
//  AccountCoordinator.swift
//  IOSArchitecture
//
//  Created by Benjamin LORENZI on 11/03/2020.
//  Copyright (c) 2020 Benjamin LORENZI. All rights reserved.
//
//  This file was generated by the DC (alias tactac kiki ðŸ¤£) Templates so
//  you can use now the benj architecture to Amex GBT project,
//  see https://gitlab.kdsneo.kds.com/blorenzi/iosarchitecture/tree/master/IOSArchitecture/Tutorial
//

import UIKit

// MARK: Dependencies
// Specify here the dependencies
protocol AccountDependenciesProtocol {
    // TODO : Dependencies declaration
    // here define all dependencies form the core
    //
    // see the example below
    //
    var profileStatus: ProfileStatus { get }
    var dataManager: DataManager { get }
    var biometryState: BiometryState { get }
}
class AccountDependencies: AccountDependenciesProtocol {
    // TODO: Use inject default core variable
    @Inject var dataManager: DataManager
    @Inject var appStates: AppStates
    var profileStatus: ProfileStatus {
        return appStates.profileStatus
    }
    var biometryState: BiometryState {
        return appStates.biometryState
    }
}

// MARK: Actions
// Specify here the actions
protocol AccountActionProtocol {
    // TODO 5) Actions declaration
    // here define all managment of interaction between
    // the controller and the User action
    //
    // see the example below
    //
    func logOut()
}
extension AccountCoordinator: AccountActionProtocol {
    // TODO 6) Actions Implementation
    // here implement every actions you define above
    //
    // see the example below
    //
    func logOut() {
       // call what you need
       LoginWorker().logOut(completion: {_,_ in })
    }
}


// MARK: Coordinator
class AccountCoordinator: Coordinator, CoordinatorConfig {
    var coordinable: Coordinable? {
        return vc
    }
    var destinations: [Destination] = []
    
    // Configuration
    typealias Deps = AccountDependenciesProtocol
    typealias ViewController = AccountViewController
    typealias ViewModel = AccountViewModel
    typealias Actions = AccountActionProtocol

    weak var parentCoordinator: Coordinator?
    weak var vc: UIViewCoordinable?

    func buildUI() -> (UIViewController & Coordinable) {
        let dependencies = AccountDependencies()
        let vc = AccountCoordinator.configure(deps: dependencies, coordinator: self)
        vc.coordinator = self
        self.vc = vc
        return vc
    }
}

