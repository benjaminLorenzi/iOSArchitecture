//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the DC (alias tactac kiki ðŸ¤£) Templates so
//  you can use now the benj architecture to Amex GBT project,
//  see https://gitlab.kdsneo.kds.com/blorenzi/iosarchitecture/tree/master/IOSArchitecture/Tutorial
//

import UIKit


protocol ___VARIABLE_featureName___ViewModelProtocol {
    // TODO 7) Declare the state of the View
    // Here declare variable of the state or object you want observe
    // ----------------------------------------------------------
    //         Variables must be only accessible in read
    // ----------------------------------------------------------
    //
    // See the example below
    //
    //var username: String { get }
    //var biometryStatus: String { get }
}

class ___VARIABLE_featureName___ViewModel: FeatureViewModel, ___VARIABLE_featureName___ViewModelProtocol {
    // MARK: uiDelegate
    weak var uiDelegate: ___VARIABLE_featureName___ViewController?
    typealias UIDelegate = ___VARIABLE_featureName___ViewController

    // MARK: Dependencies 
    var dependencies: ___VARIABLE_featureName___DependenciesProtocol
    required init(deps: ___VARIABLE_featureName___DependenciesProtocol) {
        self.dependencies = deps
        // TODO 8) Bind to dynamic values
        // Here you can observe dynamic value from state in the core 
        // See the example below
        //
        /*
        dependencies.profileStatus.addObserver(self) { [weak self] in
            self?.notify()
        }*/
    }

    // TODO 9) Implement computed value
    /*
    var username: String {
        return dependencies.dataManager.profile?.username ?? ""
    }
       
    var biometryStatus: String {
        return dependencies.biometryState.value.supportedBiometry?.rawValue ?? "none"
    }
    */
}
